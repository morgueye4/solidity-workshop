// SPDX-License-Identifier: MIT
pragma solidity >=0.8.2 <0.9.0;

contract ExempleTypesDemo {
    // ğŸŸ© **Types de base**

    // ğŸŸ© Entier non signÃ© (0 ou positif seulement)
    uint256 public entierNonSigne = 42;

    // ğŸŸ© Entier signÃ© (peut Ãªtre nÃ©gatif)
    int256 public entierSigne = -42;

    // ğŸŸ© BoolÃ©en (true ou false)
    bool public valeurBooleenne = true;

    // ğŸŸ© Adresse Ethereum (utilisÃ©e pour reprÃ©senter un compte ou un contrat)
    address public adresse = 0x1aE0EA34a72D944a8C7603FfB3eC30a6669E454C;

    // ğŸŸ© ChaÃ®ne de caractÃ¨res
    string public chaineDeCaracteres = "Bonjour Solidity";

    // ğŸŸ© Tableau dâ€™octets (taille fixe)
    bytes32 public tableauOctetsFixe = "SolidityFixedBytes";

    // ğŸŸ© Tableau dâ€™octets dynamique
    bytes public tableauOctetsDynamique = "SolidityBytes";

    // ğŸŸ¨ **Constantes et variables immuables**
    uint256 public constant CONSTANTE = 100; // Ne peut pas Ãªtre modifiÃ©e
    uint256 public immutable valeurFixe; // Doit Ãªtre dÃ©finie au dÃ©ploiement

    /**
     *  Constructeur pour dÃ©finir la variable immuable.
     *  _valeur est La valeur initiale de la variable immuable.
     */
    constructor(uint256 _valeur) {
        valeurFixe = _valeur;
    }

    // ğŸŸ¦ **Types complexes**

    // ğŸŸ¦ Mapping (clÃ©-valeur, comme un dictionnaire)
    mapping(address => uint256) public soldes;

    // ğŸŸ¦ Structure personnalisÃ©e
    struct Utilisateur {
        string nom;
        uint256 age;
    }

    Utilisateur public utilisateur = Utilisateur("Alice", 30);

    // ğŸŸ¦ Tableau dynamique (taille variable)
    uint256[] public tableauDynamique = [1, 2, 3];

    // ğŸŸ¦ Tableau fixe (taille prÃ©dÃ©finie)
    uint256[3] public tableauFixe = [10, 20, 30];

    // ğŸŸ¦ **EnumÃ©rations**
    // Enum pour reprÃ©senter un Ã©tat
    enum Etat {
        EN_ATTENTE,
        ACTIVE,
        TERMINEE
    }

    Etat public etat = Etat.EN_ATTENTE;

    // **Fonctions pour manipuler les donnÃ©es**

    /**
     * Modifier le solde d'une adresse dans le mapping.
     *  _adresse L'adresse Ã  mettre Ã  jour.
     *  _montant Le nouveau montant Ã  attribuer.
     */
    function mettreAJourSolde(address _adresse, uint256 _montant) public {
        soldes[_adresse] = _montant;
    }

    /**
     * Ajouter un Ã©lÃ©ment au tableau dynamique.
     * _valeur La valeur Ã  ajouter.
     */
    function ajouterAuTableau(uint256 _valeur) public {
        tableauDynamique.push(_valeur);
    }

    /**
     * RÃ©cupÃ©rer une valeur d'un tableau fixe.
     * index L'indice de la valeur Ã  rÃ©cupÃ©rer.
     *  La valeur Ã  l'indice spÃ©cifiÃ©.
     */
    function obtenirDepuisTableauFixe(
        uint256 index
    ) public view returns (uint256) {
        require(index < tableauFixe.length, "Index hors limites");
        return tableauFixe[index];
    }

    /**
     * Changer l'Ã©tat du contrat.
     * _nouvelEtat Le nouvel Ã©tat.
     */
    function changerEtat(Etat _nouvelEtat) public {
        etat = _nouvelEtat;
    }

    // **Types spÃ©ciaux**

    // Adresse payable (pour envoyer/recevoir des ethers)
    address payable public adressePayable;

    /**
     * DÃ©finir une adresse payable.
     * _adressePayable L'adresse payable Ã  dÃ©finir.
     */
    function definirAdressePayable(address payable _adressePayable) public {
        adressePayable = _adressePayable;
    }

    /**
     * @dev Envoyer des ethers Ã  l'adresse payable.
     */
    function envoyerEther() public payable {
        require(msg.value > 0, "Envoyer des ethers");
        adressePayable.transfer(msg.value);
    }
}
